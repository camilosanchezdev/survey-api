// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @default(autoincrement()) @id
  email       String      @unique
  password    String
  role        Role?       @relation(fields: [roleId], references: [id])
  roleId      Int?        @map("role_id")
  customer    Customer?
  createdAt   DateTime    @default(now())   @map("created_at")
  updatedAt   DateTime?    @updatedAt        @map("updated_at")
  deleted     Boolean     @default(false)
  @@map("users")
}

model Role {
  id          Int      @default(autoincrement()) @id
  name        String
  users       User[]
  createdAt   DateTime @default(now())  @map("created_at")
  updatedAt   DateTime? @updatedAt       @map("updated_at")
  deleted     Boolean  @default(false)
  @@map("roles")
}

model Customer {
  id          Int         @default(autoincrement()) @id
  firstName   String      @map("first_name")
  lastName    String      @map("last_name")
  user        User        @relation(fields: [userId], references: [id])
  userId      Int         @unique           @map("user_id")
  createdAt   DateTime    @default(now())   @map("created_at")
  updatedAt   DateTime?    @updatedAt        @map("updated_at")
  deleted     Boolean     @default(false)
  surveys     Survey[]
  @@map("customers")
}

model Survey {
  id                   Int              @default(autoincrement()) @id
  title                String
  description          String
  publicLink           String?          @map("public_link")
  customer             Customer?        @relation(fields: [customerId], references: [id])
  customerId           Int              @map("customer_id")
  surveyStatus         SurveyStatus?    @relation(fields: [surveyStatusId], references: [id])
  surveyStatusId       Int              @map("survey_status_id")
  surveyResponses      SurveyResponse[] 
  surveyQuestions      SurveyQuestion[] 
  createdAt            DateTime         @default(now())     @map("created_at")
  updatedAt            DateTime?         @updatedAt          @map("updated_at")
  deleted              Boolean          @default(false)
  @@map("surveys")
}


model SurveyStatus {
  id          Int          @default(autoincrement()) @id
  name       String
  surveys     Survey[]
  createdAt   DateTime     @default(now())            @map("created_at")
  updatedAt   DateTime?     @updatedAt                 @map("updated_at")
  deleted     Boolean      @default(false)
  @@map("survey_statuses")
}

model SurveyQuestion {
  id          Int          @default(autoincrement()) @id
  name        String
  multiple    Boolean      @default(false)
  survey      Survey?      @relation(fields: [surveyId], references: [id])
  surveyId    Int          @map("survey_id")
  surveyAnswers SurveyAnswer[]
  surveyResponseQuestions SurveyResponseQuestion[]
  createdAt   DateTime     @default(now())        @map("created_at")
  updatedAt   DateTime?     @updatedAt             @map("updated_at")
  deleted     Boolean      @default(false)
  @@map("survey_questions")
}

model SurveyAnswer {
  id                  Int                       @default(autoincrement()) @id
  name                String
  surveyQuestion      SurveyQuestion?           @relation(fields: [surveyQuestionId], references: [id])
  surveyQuestionId    Int                       @map("survey_question_id")
  surveyResponseAnswers SurveyResponseAnswer[]  
  createdAt           DateTime                  @default(now())         @map("created_at")
  updatedAt           DateTime?                 @updatedAt              @map("updated_at")
  deleted             Boolean                   @default(false)
  @@map("survey_answers")
}

model SurveyResponse {
  id                           Int                 @default(autoincrement()) @id
  survey                       Survey?             @relation(fields: [surveyId], references: [id])
  surveyId                     Int                 @map("survey_id")
  surveyResponseQuestions      SurveyResponseQuestion[] 
  createdAt                    DateTime            @default(now())        @map("created_at")
  updatedAt                    DateTime?            @updatedAt             @map("updated_at")
  deleted                      Boolean             @default(false)
  @@map("survey_responses")
}

model SurveyResponseAnswer {
  id                          Int                 @default(autoincrement()) @id
  surveyAnswer                SurveyAnswer?       @relation(fields: [surveyAnswerId], references: [id])
  surveyAnswerId              Int                  @map("survey_answer_id")
  surveyResponseQuestion      SurveyResponseQuestion?       @relation(fields: [surveyResponseQuestionId], references: [id])
  surveyResponseQuestionId    Int                 @map("survey_response_question_id")
  createdAt                   DateTime            @default(now())         @map("created_at")
  updatedAt                   DateTime?            @updatedAt              @map("updated_at")
  deleted                     Boolean             @default(false)
  @@map("survey_response_answers")
}
model SurveyResponseQuestion {
  id                  Int                 @default(autoincrement()) @id
  surveyQuestion      SurveyQuestion?     @relation(fields: [surveyQuestionId], references: [id])
  surveyQuestionId    Int                 @map("survey_question_id")
  surveyResponse      SurveyResponse?     @relation(fields: [surveyResponseId], references: [id])
  surveyResponseId    Int                 @map("survey_response_id")
  surveyResponseAnswer SurveyResponseAnswer[]
  createdAt           DateTime            @default(now())           @map("created_at")
  updatedAt           DateTime?            @updatedAt                @map("updated_at")
  deleted             Boolean             @default(false)
  @@map("survey_response_questions")
}



